import os
import glob
import pandas as pd
import re

def run_all_years(input_path_or_file, output_dir):
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö list ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
    if isinstance(input_path_or_file, list):
        all_files = input_path_or_file
    elif os.path.isfile(input_path_or_file):
        all_files = [input_path_or_file]
    else:
        all_files = glob.glob(os.path.join(input_path_or_file, "WF size* (UTL1).*"))
    # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ target_years
    print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å {input_path_or_file}")
    print(f"‡πÄ‡∏à‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(all_files)} ‡πÑ‡∏ü‡∏•‡πå")

    # ‡πÅ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏µ
    files_by_year = {}
    for filepath in all_files:
        filename = os.path.basename(filepath)
        match = re.search(r"'(\d{2})", filename)
        if match:
            file_year = 2000 + int(match.group(1))
            files_by_year.setdefault(file_year, []).append(filepath)
        else:
            print(f"‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå {filename} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏µ‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠")

    df_list = []

    for year in sorted(files_by_year):
        for filepath in files_by_year[year]:
            filename = os.path.basename(filepath)
            month_match = re.search(r"WF size ([^ ]+)", filename)
            month = month_match.group(1) if month_match else "Unknown"

            try:
                if filepath.endswith(('.xls', '.xlsx')):
                    df = pd.read_excel(filepath, engine="openpyxl" if filepath.endswith('.xlsx') else None)
                elif filepath.endswith('.csv'):
                    df = pd.read_csv(filepath)
                else:
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï: {filename}")
                    continue
            except Exception as e:
                print(f"‚ùå ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå {filename} ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                continue

            df['month'] = month
            df['file_year'] = year
            df_list.append(df)

    if not df_list:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢")
        return None  # ‡∏´‡∏£‡∏∑‡∏≠ return None, "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢"

    df_all = pd.concat(df_list, ignore_index=True)

    # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ
    required_cols = ['cust_code', 'package_code', 'product_no', 'bom_no', 'assy_pack_type', 'start_date', 'month']
    missing = [c for c in required_cols if c not in df_all.columns]
    if missing:
        print(f"‚ùå ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏´‡∏≤‡∏¢‡πÑ‡∏õ: {missing}")
        return

    df_all = df_all[required_cols + ['file_year']]

    # ‡πÅ‡∏õ‡∏•‡∏á start_date ‡πÄ‡∏õ‡πá‡∏ô datetime ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    df_all['start_date'] = pd.to_datetime(df_all['start_date'], errors='coerce')

    # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    month_order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                   'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    month_map = {m: i for i, m in enumerate(month_order, 1)}
    df_all['month_short'] = df_all['month'].str[:3]
    df_all['month_num'] = df_all['month_short'].map(month_map)

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° BOM ‚Üí ‡πÄ‡∏ß‡∏•‡∏≤ (‡∏õ‡∏µ ‚Üí ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‚Üí ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà)
    df_all = df_all.sort_values(by=[
        'bom_no', 'package_code', 'product_no', 'cust_code',
        'file_year', 'month_num', 'start_date'
    ]).reset_index(drop=True)

    # ‡∏à‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á assy_pack_type
    group_cols = ['cust_code', 'package_code', 'product_no', 'bom_no']
    
    result_list = []
    
    for name, group in df_all.groupby(group_cols):
        group = group.sort_values('start_date').reset_index(drop=True)
        
        # ‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏£‡∏Å‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á BOM ‡∏ô‡∏±‡πâ‡∏ô‡πÜ
        first_record = group.iloc[0]   # record ‡πÅ‡∏£‡∏Å‡∏™‡∏∏‡∏î (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î)
        last_record = group.iloc[-1]   # record ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á assy_pack_type ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        unique_types = group['assy_pack_type'].unique()
        
        if len(unique_types) == 1:
            # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á assy_pack_type
            row_data = {
                'cust_code': first_record['cust_code'],
                'package_code': first_record['package_code'],
                'product_no': first_record['product_no'],
                'bom_no': first_record['bom_no'],
                'prev_assy_pack_type': first_record['assy_pack_type'],
                'assy_pack_type': first_record['assy_pack_type'],
                'prev_start_date': first_record['start_date'],     # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
                'start_date': last_record['start_date'],           # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                'prev_month_name': first_record['start_date'].strftime('%b'),
                'curr_month_name': last_record['start_date'].strftime('%b'),
                'change_status': 'No Change'
            }
            result_list.append(row_data)
        else:
            # ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á assy_pack_type
            # ‡∏´‡∏≤ assy_pack_type ‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            first_assy_type = first_record['assy_pack_type']
            last_assy_type = last_record['assy_pack_type']
            
            row_data = {
                'cust_code': first_record['cust_code'],
                'package_code': first_record['package_code'],
                'product_no': first_record['product_no'],
                'bom_no': first_record['bom_no'],
                'prev_assy_pack_type': first_assy_type,           # assy_pack_type ‡πÅ‡∏£‡∏Å
                'assy_pack_type': last_assy_type,                 # assy_pack_type ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                'prev_start_date': first_record['start_date'],    # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
                'start_date': last_record['start_date'],          # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                'prev_month_name': first_record['start_date'].strftime('%b'),
                'curr_month_name': last_record['start_date'].strftime('%b'),
                'change_status': 'Changed'
            }
            result_list.append(row_data)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    summary_df = pd.DataFrame(result_list)
    
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ Categorical
    month_order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                   'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    summary_df['prev_month_name'] = pd.Categorical(summary_df['prev_month_name'], categories=month_order, ordered=True)
    summary_df['curr_month_name'] = pd.Categorical(summary_df['curr_month_name'], categories=month_order, ordered=True)

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
    summary_df = summary_df.sort_values(by=['start_date']).reset_index(drop=True)

    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
    output_cols = group_cols + [
        'prev_assy_pack_type', 'assy_pack_type',
        'prev_start_date', 'start_date',
        'prev_month_name', 'curr_month_name',
        'change_status'
    ]

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå - ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô Last_Type.xlsx
    os.makedirs(output_dir, exist_ok=True)
    output_file = os.path.join(output_dir, "Last_Type.xlsx")  # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
    
    # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å Excel ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    with pd.ExcelWriter(output_file, engine='xlsxwriter') as writer:
        summary_df[output_cols].to_excel(writer, index=False, sheet_name='BOM Summary')
        worksheet = writer.sheets['BOM Summary']
        worksheet.set_column('A:K', 15)
    print(f"‚úÖ Output file saved at: {output_file}")  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ

    # ‡∏ô‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    changed_count = len(summary_df[summary_df['change_status'] == 'Changed'])
    no_change_count = len(summary_df[summary_df['change_status'] == 'No Change'])

    print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: {output_file}")
    print(f"üìä BOM ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: {changed_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print(f"üìã BOM ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: {no_change_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print(f"üìà ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(summary_df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    return output_file  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å return summary_df ‡πÄ‡∏õ‡πá‡∏ô return output_file

def PNP_CHANGE_TYPE(input_path, output_dir):
    return run_all_years(input_path, output_dir)
